// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protocol {
PROTOBUF_CONSTEXPR Client::Client(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.audio_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.packettime_)*/nullptr
  , /*decltype(_impl_.secret_id_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.audionum_)*/0
  , /*decltype(_impl_.coordx_)*/0
  , /*decltype(_impl_.coordy_)*/0
  , /*decltype(_impl_.coordz_)*/0
  , /*decltype(_impl_.mapnum_)*/0
  , /*decltype(_impl_.blockplayer_id_)*/0
  , /*decltype(_impl_.talkinroom_id_)*/0
  , /*decltype(_impl_.talklocal_)*/false
  , /*decltype(_impl_.sampletime_)*/0} {}
struct ClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDefaultTypeInternal() {}
  union {
    Client _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDefaultTypeInternal _Client_default_instance_;
PROTOBUF_CONSTEXPR Server::Server(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.audio_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.packettime_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.audionum_)*/0
  , /*decltype(_impl_.coordx_)*/0
  , /*decltype(_impl_.handshake_)*/false
  , /*decltype(_impl_.notconnected_)*/false
  , /*decltype(_impl_.coordy_)*/0
  , /*decltype(_impl_.coordz_)*/0
  , /*decltype(_impl_.mapnum_)*/0
  , /*decltype(_impl_.sampletime_)*/0} {}
struct ServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerDefaultTypeInternal() {}
  union {
    Server _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerDefaultTypeInternal _Server_default_instance_;
}  // namespace protocol
static ::_pb::Metadata file_level_metadata_protocol_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_protocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protocol_2eproto = nullptr;

const uint32_t TableStruct_protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protocol::Client, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::Client, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::Client, _impl_.secret_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Client, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Client, _impl_.audio_),
  PROTOBUF_FIELD_OFFSET(::protocol::Client, _impl_.audionum_),
  PROTOBUF_FIELD_OFFSET(::protocol::Client, _impl_.coordx_),
  PROTOBUF_FIELD_OFFSET(::protocol::Client, _impl_.coordy_),
  PROTOBUF_FIELD_OFFSET(::protocol::Client, _impl_.coordz_),
  PROTOBUF_FIELD_OFFSET(::protocol::Client, _impl_.mapnum_),
  PROTOBUF_FIELD_OFFSET(::protocol::Client, _impl_.blockplayer_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Client, _impl_.talkinroom_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Client, _impl_.talklocal_),
  PROTOBUF_FIELD_OFFSET(::protocol::Client, _impl_.sampletime_),
  PROTOBUF_FIELD_OFFSET(::protocol::Client, _impl_.packettime_),
  2,
  3,
  0,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::Server, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::Server, _impl_.handshake_),
  PROTOBUF_FIELD_OFFSET(::protocol::Server, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Server, _impl_.audio_),
  PROTOBUF_FIELD_OFFSET(::protocol::Server, _impl_.audionum_),
  PROTOBUF_FIELD_OFFSET(::protocol::Server, _impl_.coordx_),
  PROTOBUF_FIELD_OFFSET(::protocol::Server, _impl_.coordy_),
  PROTOBUF_FIELD_OFFSET(::protocol::Server, _impl_.coordz_),
  PROTOBUF_FIELD_OFFSET(::protocol::Server, _impl_.mapnum_),
  PROTOBUF_FIELD_OFFSET(::protocol::Server, _impl_.sampletime_),
  PROTOBUF_FIELD_OFFSET(::protocol::Server, _impl_.notconnected_),
  PROTOBUF_FIELD_OFFSET(::protocol::Server, _impl_.packettime_),
  4,
  ~0u,
  0,
  2,
  3,
  6,
  7,
  8,
  9,
  5,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, -1, sizeof(::protocol::Client)},
  { 32, 49, -1, sizeof(::protocol::Server)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::protocol::_Client_default_instance_._instance,
  &::protocol::_Server_default_instance_._instance,
};

const char descriptor_table_protodef_protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016protocol.proto\022\010protocol\032\037google/proto"
  "buf/timestamp.proto\"\370\003\n\006Client\022\026\n\tsecret"
  "_id\030\001 \001(\005H\000\210\001\001\022\017\n\002id\030\002 \001(\005H\001\210\001\001\022\022\n\005audio"
  "\030\003 \001(\014H\002\210\001\001\022\025\n\010audioNum\030\004 \001(\005H\003\210\001\001\022\023\n\006co"
  "ordX\030\005 \001(\005H\004\210\001\001\022\023\n\006coordY\030\006 \001(\005H\005\210\001\001\022\023\n\006"
  "coordZ\030\007 \001(\005H\006\210\001\001\022\023\n\006mapNum\030\010 \001(\005H\007\210\001\001\022\033"
  "\n\016blockPlayer_id\030\t \001(\005H\010\210\001\001\022\032\n\rtalkInRoo"
  "m_id\030\n \001(\005H\t\210\001\001\022\026\n\ttalkLocal\030\013 \001(\010H\n\210\001\001\022"
  "\027\n\nsampleTime\030\014 \001(\005H\013\210\001\001\0223\n\npacketTime\030\r"
  " \001(\0132\032.google.protobuf.TimestampH\014\210\001\001B\014\n"
  "\n_secret_idB\005\n\003_idB\010\n\006_audioB\013\n\t_audioNu"
  "mB\t\n\007_coordXB\t\n\007_coordYB\t\n\007_coordZB\t\n\007_m"
  "apNumB\021\n\017_blockPlayer_idB\020\n\016_talkInRoom_"
  "idB\014\n\n_talkLocalB\r\n\013_sampleTimeB\r\n\013_pack"
  "etTime\"\224\003\n\006Server\022\026\n\thandShake\030\001 \001(\010H\000\210\001"
  "\001\022\n\n\002id\030\002 \001(\005\022\022\n\005audio\030\003 \001(\014H\001\210\001\001\022\025\n\010aud"
  "ioNum\030\004 \001(\005H\002\210\001\001\022\023\n\006coordX\030\005 \001(\005H\003\210\001\001\022\023\n"
  "\006coordY\030\006 \001(\005H\004\210\001\001\022\023\n\006coordZ\030\007 \001(\005H\005\210\001\001\022"
  "\023\n\006mapNum\030\010 \001(\005H\006\210\001\001\022\027\n\nsampleTime\030\t \001(\005"
  "H\007\210\001\001\022\031\n\014notConnected\030\n \001(\010H\010\210\001\001\0223\n\npack"
  "etTime\030\013 \001(\0132\032.google.protobuf.Timestamp"
  "H\t\210\001\001B\014\n\n_handShakeB\010\n\006_audioB\013\n\t_audioN"
  "umB\t\n\007_coordXB\t\n\007_coordYB\t\n\007_coordZB\t\n\007_"
  "mapNumB\r\n\013_sampleTimeB\017\n\r_notConnectedB\r"
  "\n\013_packetTimeB\026\n\024pasaud.voip.protocolb\006p"
  "roto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_protocol_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protocol_2eproto = {
    false, false, 1005, descriptor_table_protodef_protocol_2eproto,
    "protocol.proto",
    &descriptor_table_protocol_2eproto_once, descriptor_table_protocol_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_protocol_2eproto::offsets,
    file_level_metadata_protocol_2eproto, file_level_enum_descriptors_protocol_2eproto,
    file_level_service_descriptors_protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protocol_2eproto_getter() {
  return &descriptor_table_protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protocol_2eproto(&descriptor_table_protocol_2eproto);
namespace protocol {

// ===================================================================

class Client::_Internal {
 public:
  using HasBits = decltype(std::declval<Client>()._impl_._has_bits_);
  static void set_has_secret_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_audio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_audionum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_coordx(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_coordy(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_coordz(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mapnum(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_blockplayer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_talkinroom_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_talklocal(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_sampletime(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& packettime(const Client* msg);
  static void set_has_packettime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Client::_Internal::packettime(const Client* msg) {
  return *msg->_impl_.packettime_;
}
void Client::clear_packettime() {
  if (_impl_.packettime_ != nullptr) _impl_.packettime_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Client::Client(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocol.Client)
}
Client::Client(const Client& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Client* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audio_){}
    , decltype(_impl_.packettime_){nullptr}
    , decltype(_impl_.secret_id_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.audionum_){}
    , decltype(_impl_.coordx_){}
    , decltype(_impl_.coordy_){}
    , decltype(_impl_.coordz_){}
    , decltype(_impl_.mapnum_){}
    , decltype(_impl_.blockplayer_id_){}
    , decltype(_impl_.talkinroom_id_){}
    , decltype(_impl_.talklocal_){}
    , decltype(_impl_.sampletime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.audio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audio_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_audio()) {
    _this->_impl_.audio_.Set(from._internal_audio(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_packettime()) {
    _this->_impl_.packettime_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.packettime_);
  }
  ::memcpy(&_impl_.secret_id_, &from._impl_.secret_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sampletime_) -
    reinterpret_cast<char*>(&_impl_.secret_id_)) + sizeof(_impl_.sampletime_));
  // @@protoc_insertion_point(copy_constructor:protocol.Client)
}

inline void Client::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audio_){}
    , decltype(_impl_.packettime_){nullptr}
    , decltype(_impl_.secret_id_){0}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.audionum_){0}
    , decltype(_impl_.coordx_){0}
    , decltype(_impl_.coordy_){0}
    , decltype(_impl_.coordz_){0}
    , decltype(_impl_.mapnum_){0}
    , decltype(_impl_.blockplayer_id_){0}
    , decltype(_impl_.talkinroom_id_){0}
    , decltype(_impl_.talklocal_){false}
    , decltype(_impl_.sampletime_){0}
  };
  _impl_.audio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audio_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Client::~Client() {
  // @@protoc_insertion_point(destructor:protocol.Client)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Client::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.audio_.Destroy();
  if (this != internal_default_instance()) delete _impl_.packettime_;
}

void Client::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Client::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Client)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.audio_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.packettime_ != nullptr);
      _impl_.packettime_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.secret_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.coordz_) -
        reinterpret_cast<char*>(&_impl_.secret_id_)) + sizeof(_impl_.coordz_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.mapnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sampletime_) -
        reinterpret_cast<char*>(&_impl_.mapnum_)) + sizeof(_impl_.sampletime_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Client::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 secret_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_secret_id(&has_bits);
          _impl_.secret_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes audio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_audio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 audioNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_audionum(&has_bits);
          _impl_.audionum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 coordX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_coordx(&has_bits);
          _impl_.coordx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 coordY = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_coordy(&has_bits);
          _impl_.coordy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 coordZ = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_coordz(&has_bits);
          _impl_.coordz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mapNum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_mapnum(&has_bits);
          _impl_.mapnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 blockPlayer_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_blockplayer_id(&has_bits);
          _impl_.blockplayer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 talkInRoom_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_talkinroom_id(&has_bits);
          _impl_.talkinroom_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool talkLocal = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_talklocal(&has_bits);
          _impl_.talklocal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sampleTime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_sampletime(&has_bits);
          _impl_.sampletime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp packetTime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_packettime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Client::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Client)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 secret_id = 1;
  if (_internal_has_secret_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_secret_id(), target);
  }

  // optional int32 id = 2;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // optional bytes audio = 3;
  if (_internal_has_audio()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_audio(), target);
  }

  // optional int32 audioNum = 4;
  if (_internal_has_audionum()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_audionum(), target);
  }

  // optional int32 coordX = 5;
  if (_internal_has_coordx()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_coordx(), target);
  }

  // optional int32 coordY = 6;
  if (_internal_has_coordy()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_coordy(), target);
  }

  // optional int32 coordZ = 7;
  if (_internal_has_coordz()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_coordz(), target);
  }

  // optional int32 mapNum = 8;
  if (_internal_has_mapnum()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_mapnum(), target);
  }

  // optional int32 blockPlayer_id = 9;
  if (_internal_has_blockplayer_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_blockplayer_id(), target);
  }

  // optional int32 talkInRoom_id = 10;
  if (_internal_has_talkinroom_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_talkinroom_id(), target);
  }

  // optional bool talkLocal = 11;
  if (_internal_has_talklocal()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_talklocal(), target);
  }

  // optional int32 sampleTime = 12;
  if (_internal_has_sampletime()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_sampletime(), target);
  }

  // optional .google.protobuf.Timestamp packetTime = 13;
  if (_internal_has_packettime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::packettime(this),
        _Internal::packettime(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Client)
  return target;
}

size_t Client::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Client)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes audio = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_audio());
    }

    // optional .google.protobuf.Timestamp packetTime = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packettime_);
    }

    // optional int32 secret_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_secret_id());
    }

    // optional int32 id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional int32 audioNum = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_audionum());
    }

    // optional int32 coordX = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_coordx());
    }

    // optional int32 coordY = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_coordy());
    }

    // optional int32 coordZ = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_coordz());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional int32 mapNum = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapnum());
    }

    // optional int32 blockPlayer_id = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_blockplayer_id());
    }

    // optional int32 talkInRoom_id = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_talkinroom_id());
    }

    // optional bool talkLocal = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional int32 sampleTime = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sampletime());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Client::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Client::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Client::GetClassData() const { return &_class_data_; }


void Client::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Client*>(&to_msg);
  auto& from = static_cast<const Client&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocol.Client)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_audio(from._internal_audio());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_packettime()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_packettime());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.secret_id_ = from._impl_.secret_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.audionum_ = from._impl_.audionum_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.coordx_ = from._impl_.coordx_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.coordy_ = from._impl_.coordy_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.coordz_ = from._impl_.coordz_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.mapnum_ = from._impl_.mapnum_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.blockplayer_id_ = from._impl_.blockplayer_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.talkinroom_id_ = from._impl_.talkinroom_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.talklocal_ = from._impl_.talklocal_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.sampletime_ = from._impl_.sampletime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Client::CopyFrom(const Client& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Client)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client::IsInitialized() const {
  return true;
}

void Client::InternalSwap(Client* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.audio_, lhs_arena,
      &other->_impl_.audio_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Client, _impl_.sampletime_)
      + sizeof(Client::_impl_.sampletime_)
      - PROTOBUF_FIELD_OFFSET(Client, _impl_.packettime_)>(
          reinterpret_cast<char*>(&_impl_.packettime_),
          reinterpret_cast<char*>(&other->_impl_.packettime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Client::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[0]);
}

// ===================================================================

class Server::_Internal {
 public:
  using HasBits = decltype(std::declval<Server>()._impl_._has_bits_);
  static void set_has_handshake(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_audio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_audionum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_coordx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_coordy(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_coordz(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mapnum(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sampletime(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_notconnected(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& packettime(const Server* msg);
  static void set_has_packettime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Server::_Internal::packettime(const Server* msg) {
  return *msg->_impl_.packettime_;
}
void Server::clear_packettime() {
  if (_impl_.packettime_ != nullptr) _impl_.packettime_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Server::Server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocol.Server)
}
Server::Server(const Server& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Server* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audio_){}
    , decltype(_impl_.packettime_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.audionum_){}
    , decltype(_impl_.coordx_){}
    , decltype(_impl_.handshake_){}
    , decltype(_impl_.notconnected_){}
    , decltype(_impl_.coordy_){}
    , decltype(_impl_.coordz_){}
    , decltype(_impl_.mapnum_){}
    , decltype(_impl_.sampletime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.audio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audio_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_audio()) {
    _this->_impl_.audio_.Set(from._internal_audio(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_packettime()) {
    _this->_impl_.packettime_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.packettime_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sampletime_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sampletime_));
  // @@protoc_insertion_point(copy_constructor:protocol.Server)
}

inline void Server::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audio_){}
    , decltype(_impl_.packettime_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.audionum_){0}
    , decltype(_impl_.coordx_){0}
    , decltype(_impl_.handshake_){false}
    , decltype(_impl_.notconnected_){false}
    , decltype(_impl_.coordy_){0}
    , decltype(_impl_.coordz_){0}
    , decltype(_impl_.mapnum_){0}
    , decltype(_impl_.sampletime_){0}
  };
  _impl_.audio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audio_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Server::~Server() {
  // @@protoc_insertion_point(destructor:protocol.Server)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Server::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.audio_.Destroy();
  if (this != internal_default_instance()) delete _impl_.packettime_;
}

void Server::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Server::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Server)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.audio_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.packettime_ != nullptr);
      _impl_.packettime_->Clear();
    }
  }
  _impl_.id_ = 0;
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.audionum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.coordz_) -
        reinterpret_cast<char*>(&_impl_.audionum_)) + sizeof(_impl_.coordz_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.mapnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sampletime_) -
        reinterpret_cast<char*>(&_impl_.mapnum_)) + sizeof(_impl_.sampletime_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Server::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool handShake = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_handshake(&has_bits);
          _impl_.handshake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes audio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_audio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 audioNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_audionum(&has_bits);
          _impl_.audionum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 coordX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_coordx(&has_bits);
          _impl_.coordx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 coordY = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_coordy(&has_bits);
          _impl_.coordy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 coordZ = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_coordz(&has_bits);
          _impl_.coordz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mapNum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_mapnum(&has_bits);
          _impl_.mapnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sampleTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_sampletime(&has_bits);
          _impl_.sampletime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool notConnected = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_notconnected(&has_bits);
          _impl_.notconnected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp packetTime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_packettime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Server::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Server)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool handShake = 1;
  if (_internal_has_handshake()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_handshake(), target);
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // optional bytes audio = 3;
  if (_internal_has_audio()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_audio(), target);
  }

  // optional int32 audioNum = 4;
  if (_internal_has_audionum()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_audionum(), target);
  }

  // optional int32 coordX = 5;
  if (_internal_has_coordx()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_coordx(), target);
  }

  // optional int32 coordY = 6;
  if (_internal_has_coordy()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_coordy(), target);
  }

  // optional int32 coordZ = 7;
  if (_internal_has_coordz()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_coordz(), target);
  }

  // optional int32 mapNum = 8;
  if (_internal_has_mapnum()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_mapnum(), target);
  }

  // optional int32 sampleTime = 9;
  if (_internal_has_sampletime()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_sampletime(), target);
  }

  // optional bool notConnected = 10;
  if (_internal_has_notconnected()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_notconnected(), target);
  }

  // optional .google.protobuf.Timestamp packetTime = 11;
  if (_internal_has_packettime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::packettime(this),
        _Internal::packettime(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Server)
  return target;
}

size_t Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Server)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes audio = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_audio());
    }

    // optional .google.protobuf.Timestamp packetTime = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packettime_);
    }

  }
  // int32 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional int32 audioNum = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_audionum());
    }

    // optional int32 coordX = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_coordx());
    }

    // optional bool handShake = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool notConnected = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 coordY = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_coordy());
    }

    // optional int32 coordZ = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_coordz());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 mapNum = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapnum());
    }

    // optional int32 sampleTime = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sampletime());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Server::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Server::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Server::GetClassData() const { return &_class_data_; }


void Server::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Server*>(&to_msg);
  auto& from = static_cast<const Server&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocol.Server)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_audio(from._internal_audio());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_packettime()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_packettime());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (cached_has_bits & 0x000000fcu) {
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.audionum_ = from._impl_.audionum_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.coordx_ = from._impl_.coordx_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.handshake_ = from._impl_.handshake_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.notconnected_ = from._impl_.notconnected_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.coordy_ = from._impl_.coordy_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.coordz_ = from._impl_.coordz_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.mapnum_ = from._impl_.mapnum_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.sampletime_ = from._impl_.sampletime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Server::CopyFrom(const Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {
  return true;
}

void Server::InternalSwap(Server* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.audio_, lhs_arena,
      &other->_impl_.audio_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Server, _impl_.sampletime_)
      + sizeof(Server::_impl_.sampletime_)
      - PROTOBUF_FIELD_OFFSET(Server, _impl_.packettime_)>(
          reinterpret_cast<char*>(&_impl_.packettime_),
          reinterpret_cast<char*>(&other->_impl_.packettime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Server::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::Client*
Arena::CreateMaybeMessage< ::protocol::Client >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Client >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Server*
Arena::CreateMaybeMessage< ::protocol::Server >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Server >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
