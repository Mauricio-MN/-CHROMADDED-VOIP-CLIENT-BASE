// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
namespace protocol {
class Client;
struct ClientDefaultTypeInternal;
extern ClientDefaultTypeInternal _Client_default_instance_;
class Server;
struct ServerDefaultTypeInternal;
extern ServerDefaultTypeInternal _Server_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::Client* Arena::CreateMaybeMessage<::protocol::Client>(Arena*);
template<> ::protocol::Server* Arena::CreateMaybeMessage<::protocol::Server>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class Client final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Client) */ {
 public:
  inline Client() : Client(nullptr) {}
  ~Client() override;
  explicit PROTOBUF_CONSTEXPR Client(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Client(const Client& from);
  Client(Client&& from) noexcept
    : Client() {
    *this = ::std::move(from);
  }

  inline Client& operator=(const Client& from) {
    CopyFrom(from);
    return *this;
  }
  inline Client& operator=(Client&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Client& default_instance() {
    return *internal_default_instance();
  }
  static inline const Client* internal_default_instance() {
    return reinterpret_cast<const Client*>(
               &_Client_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Client& a, Client& b) {
    a.Swap(&b);
  }
  inline void Swap(Client* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Client* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Client* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Client>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Client& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Client& from) {
    Client::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Client* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Client";
  }
  protected:
  explicit Client(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 3,
    kPacketTimeFieldNumber = 13,
    kSecretIdFieldNumber = 1,
    kIdFieldNumber = 2,
    kAudioNumFieldNumber = 4,
    kCoordXFieldNumber = 5,
    kCoordYFieldNumber = 6,
    kCoordZFieldNumber = 7,
    kMapNumFieldNumber = 8,
    kBlockPlayerIdFieldNumber = 9,
    kTalkInRoomIdFieldNumber = 10,
    kTalkLocalFieldNumber = 11,
    kSampleTimeFieldNumber = 12,
  };
  // optional bytes audio = 3;
  bool has_audio() const;
  private:
  bool _internal_has_audio() const;
  public:
  void clear_audio();
  const std::string& audio() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audio(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audio();
  PROTOBUF_NODISCARD std::string* release_audio();
  void set_allocated_audio(std::string* audio);
  private:
  const std::string& _internal_audio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio(const std::string& value);
  std::string* _internal_mutable_audio();
  public:

  // optional .google.protobuf.Timestamp packetTime = 13;
  bool has_packettime() const;
  private:
  bool _internal_has_packettime() const;
  public:
  void clear_packettime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& packettime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_packettime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_packettime();
  void set_allocated_packettime(::PROTOBUF_NAMESPACE_ID::Timestamp* packettime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_packettime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_packettime();
  public:
  void unsafe_arena_set_allocated_packettime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* packettime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_packettime();

  // optional int32 secret_id = 1;
  bool has_secret_id() const;
  private:
  bool _internal_has_secret_id() const;
  public:
  void clear_secret_id();
  int32_t secret_id() const;
  void set_secret_id(int32_t value);
  private:
  int32_t _internal_secret_id() const;
  void _internal_set_secret_id(int32_t value);
  public:

  // int32 id = 2;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional int32 audioNum = 4;
  bool has_audionum() const;
  private:
  bool _internal_has_audionum() const;
  public:
  void clear_audionum();
  int32_t audionum() const;
  void set_audionum(int32_t value);
  private:
  int32_t _internal_audionum() const;
  void _internal_set_audionum(int32_t value);
  public:

  // optional int32 coordX = 5;
  bool has_coordx() const;
  private:
  bool _internal_has_coordx() const;
  public:
  void clear_coordx();
  int32_t coordx() const;
  void set_coordx(int32_t value);
  private:
  int32_t _internal_coordx() const;
  void _internal_set_coordx(int32_t value);
  public:

  // optional int32 coordY = 6;
  bool has_coordy() const;
  private:
  bool _internal_has_coordy() const;
  public:
  void clear_coordy();
  int32_t coordy() const;
  void set_coordy(int32_t value);
  private:
  int32_t _internal_coordy() const;
  void _internal_set_coordy(int32_t value);
  public:

  // optional int32 coordZ = 7;
  bool has_coordz() const;
  private:
  bool _internal_has_coordz() const;
  public:
  void clear_coordz();
  int32_t coordz() const;
  void set_coordz(int32_t value);
  private:
  int32_t _internal_coordz() const;
  void _internal_set_coordz(int32_t value);
  public:

  // optional int32 mapNum = 8;
  bool has_mapnum() const;
  private:
  bool _internal_has_mapnum() const;
  public:
  void clear_mapnum();
  int32_t mapnum() const;
  void set_mapnum(int32_t value);
  private:
  int32_t _internal_mapnum() const;
  void _internal_set_mapnum(int32_t value);
  public:

  // optional int32 blockPlayer_id = 9;
  bool has_blockplayer_id() const;
  private:
  bool _internal_has_blockplayer_id() const;
  public:
  void clear_blockplayer_id();
  int32_t blockplayer_id() const;
  void set_blockplayer_id(int32_t value);
  private:
  int32_t _internal_blockplayer_id() const;
  void _internal_set_blockplayer_id(int32_t value);
  public:

  // optional int32 talkInRoom_id = 10;
  bool has_talkinroom_id() const;
  private:
  bool _internal_has_talkinroom_id() const;
  public:
  void clear_talkinroom_id();
  int32_t talkinroom_id() const;
  void set_talkinroom_id(int32_t value);
  private:
  int32_t _internal_talkinroom_id() const;
  void _internal_set_talkinroom_id(int32_t value);
  public:

  // optional bool talkLocal = 11;
  bool has_talklocal() const;
  private:
  bool _internal_has_talklocal() const;
  public:
  void clear_talklocal();
  bool talklocal() const;
  void set_talklocal(bool value);
  private:
  bool _internal_talklocal() const;
  void _internal_set_talklocal(bool value);
  public:

  // optional int32 sampleTime = 12;
  bool has_sampletime() const;
  private:
  bool _internal_has_sampletime() const;
  public:
  void clear_sampletime();
  int32_t sampletime() const;
  void set_sampletime(int32_t value);
  private:
  int32_t _internal_sampletime() const;
  void _internal_set_sampletime(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.Client)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* packettime_;
    int32_t secret_id_;
    int32_t id_;
    int32_t audionum_;
    int32_t coordx_;
    int32_t coordy_;
    int32_t coordz_;
    int32_t mapnum_;
    int32_t blockplayer_id_;
    int32_t talkinroom_id_;
    bool talklocal_;
    int32_t sampletime_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Server final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Server) */ {
 public:
  inline Server() : Server(nullptr) {}
  ~Server() override;
  explicit PROTOBUF_CONSTEXPR Server(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Server(const Server& from);
  Server(Server&& from) noexcept
    : Server() {
    *this = ::std::move(from);
  }

  inline Server& operator=(const Server& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server& operator=(Server&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Server& default_instance() {
    return *internal_default_instance();
  }
  static inline const Server* internal_default_instance() {
    return reinterpret_cast<const Server*>(
               &_Server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Server& a, Server& b) {
    a.Swap(&b);
  }
  inline void Swap(Server* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Server* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Server* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Server>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Server& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Server& from) {
    Server::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Server* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Server";
  }
  protected:
  explicit Server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 3,
    kPacketTimeFieldNumber = 11,
    kIdFieldNumber = 2,
    kAudioNumFieldNumber = 4,
    kCoordXFieldNumber = 5,
    kHandShakeFieldNumber = 1,
    kNotConnectedFieldNumber = 10,
    kCoordYFieldNumber = 6,
    kCoordZFieldNumber = 7,
    kMapNumFieldNumber = 8,
    kSampleTimeFieldNumber = 9,
  };
  // optional bytes audio = 3;
  bool has_audio() const;
  private:
  bool _internal_has_audio() const;
  public:
  void clear_audio();
  const std::string& audio() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audio(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audio();
  PROTOBUF_NODISCARD std::string* release_audio();
  void set_allocated_audio(std::string* audio);
  private:
  const std::string& _internal_audio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio(const std::string& value);
  std::string* _internal_mutable_audio();
  public:

  // optional .google.protobuf.Timestamp packetTime = 11;
  bool has_packettime() const;
  private:
  bool _internal_has_packettime() const;
  public:
  void clear_packettime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& packettime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_packettime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_packettime();
  void set_allocated_packettime(::PROTOBUF_NAMESPACE_ID::Timestamp* packettime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_packettime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_packettime();
  public:
  void unsafe_arena_set_allocated_packettime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* packettime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_packettime();

  // int32 id = 2;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional int32 audioNum = 4;
  bool has_audionum() const;
  private:
  bool _internal_has_audionum() const;
  public:
  void clear_audionum();
  int32_t audionum() const;
  void set_audionum(int32_t value);
  private:
  int32_t _internal_audionum() const;
  void _internal_set_audionum(int32_t value);
  public:

  // optional int32 coordX = 5;
  bool has_coordx() const;
  private:
  bool _internal_has_coordx() const;
  public:
  void clear_coordx();
  int32_t coordx() const;
  void set_coordx(int32_t value);
  private:
  int32_t _internal_coordx() const;
  void _internal_set_coordx(int32_t value);
  public:

  // optional bool handShake = 1;
  bool has_handshake() const;
  private:
  bool _internal_has_handshake() const;
  public:
  void clear_handshake();
  bool handshake() const;
  void set_handshake(bool value);
  private:
  bool _internal_handshake() const;
  void _internal_set_handshake(bool value);
  public:

  // optional bool notConnected = 10;
  bool has_notconnected() const;
  private:
  bool _internal_has_notconnected() const;
  public:
  void clear_notconnected();
  bool notconnected() const;
  void set_notconnected(bool value);
  private:
  bool _internal_notconnected() const;
  void _internal_set_notconnected(bool value);
  public:

  // optional int32 coordY = 6;
  bool has_coordy() const;
  private:
  bool _internal_has_coordy() const;
  public:
  void clear_coordy();
  int32_t coordy() const;
  void set_coordy(int32_t value);
  private:
  int32_t _internal_coordy() const;
  void _internal_set_coordy(int32_t value);
  public:

  // optional int32 coordZ = 7;
  bool has_coordz() const;
  private:
  bool _internal_has_coordz() const;
  public:
  void clear_coordz();
  int32_t coordz() const;
  void set_coordz(int32_t value);
  private:
  int32_t _internal_coordz() const;
  void _internal_set_coordz(int32_t value);
  public:

  // optional int32 mapNum = 8;
  bool has_mapnum() const;
  private:
  bool _internal_has_mapnum() const;
  public:
  void clear_mapnum();
  int32_t mapnum() const;
  void set_mapnum(int32_t value);
  private:
  int32_t _internal_mapnum() const;
  void _internal_set_mapnum(int32_t value);
  public:

  // optional int32 sampleTime = 9;
  bool has_sampletime() const;
  private:
  bool _internal_has_sampletime() const;
  public:
  void clear_sampletime();
  int32_t sampletime() const;
  void set_sampletime(int32_t value);
  private:
  int32_t _internal_sampletime() const;
  void _internal_set_sampletime(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.Server)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* packettime_;
    int32_t id_;
    int32_t audionum_;
    int32_t coordx_;
    bool handshake_;
    bool notconnected_;
    int32_t coordy_;
    int32_t coordz_;
    int32_t mapnum_;
    int32_t sampletime_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Client

// optional int32 secret_id = 1;
inline bool Client::_internal_has_secret_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Client::has_secret_id() const {
  return _internal_has_secret_id();
}
inline void Client::clear_secret_id() {
  _impl_.secret_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Client::_internal_secret_id() const {
  return _impl_.secret_id_;
}
inline int32_t Client::secret_id() const {
  // @@protoc_insertion_point(field_get:protocol.Client.secret_id)
  return _internal_secret_id();
}
inline void Client::_internal_set_secret_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.secret_id_ = value;
}
inline void Client::set_secret_id(int32_t value) {
  _internal_set_secret_id(value);
  // @@protoc_insertion_point(field_set:protocol.Client.secret_id)
}

// int32 id = 2;
inline void Client::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Client::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Client::id() const {
  // @@protoc_insertion_point(field_get:protocol.Client.id)
  return _internal_id();
}
inline void Client::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Client::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.Client.id)
}

// optional bytes audio = 3;
inline bool Client::_internal_has_audio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Client::has_audio() const {
  return _internal_has_audio();
}
inline void Client::clear_audio() {
  _impl_.audio_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Client::audio() const {
  // @@protoc_insertion_point(field_get:protocol.Client.audio)
  return _internal_audio();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Client::set_audio(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.audio_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.Client.audio)
}
inline std::string* Client::mutable_audio() {
  std::string* _s = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:protocol.Client.audio)
  return _s;
}
inline const std::string& Client::_internal_audio() const {
  return _impl_.audio_.Get();
}
inline void Client::_internal_set_audio(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.audio_.Set(value, GetArenaForAllocation());
}
inline std::string* Client::_internal_mutable_audio() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.audio_.Mutable(GetArenaForAllocation());
}
inline std::string* Client::release_audio() {
  // @@protoc_insertion_point(field_release:protocol.Client.audio)
  if (!_internal_has_audio()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.audio_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.audio_.IsDefault()) {
    _impl_.audio_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Client::set_allocated_audio(std::string* audio) {
  if (audio != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.audio_.SetAllocated(audio, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.audio_.IsDefault()) {
    _impl_.audio_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.Client.audio)
}

// optional int32 audioNum = 4;
inline bool Client::_internal_has_audionum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Client::has_audionum() const {
  return _internal_has_audionum();
}
inline void Client::clear_audionum() {
  _impl_.audionum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Client::_internal_audionum() const {
  return _impl_.audionum_;
}
inline int32_t Client::audionum() const {
  // @@protoc_insertion_point(field_get:protocol.Client.audioNum)
  return _internal_audionum();
}
inline void Client::_internal_set_audionum(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.audionum_ = value;
}
inline void Client::set_audionum(int32_t value) {
  _internal_set_audionum(value);
  // @@protoc_insertion_point(field_set:protocol.Client.audioNum)
}

// optional int32 coordX = 5;
inline bool Client::_internal_has_coordx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Client::has_coordx() const {
  return _internal_has_coordx();
}
inline void Client::clear_coordx() {
  _impl_.coordx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t Client::_internal_coordx() const {
  return _impl_.coordx_;
}
inline int32_t Client::coordx() const {
  // @@protoc_insertion_point(field_get:protocol.Client.coordX)
  return _internal_coordx();
}
inline void Client::_internal_set_coordx(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.coordx_ = value;
}
inline void Client::set_coordx(int32_t value) {
  _internal_set_coordx(value);
  // @@protoc_insertion_point(field_set:protocol.Client.coordX)
}

// optional int32 coordY = 6;
inline bool Client::_internal_has_coordy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Client::has_coordy() const {
  return _internal_has_coordy();
}
inline void Client::clear_coordy() {
  _impl_.coordy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t Client::_internal_coordy() const {
  return _impl_.coordy_;
}
inline int32_t Client::coordy() const {
  // @@protoc_insertion_point(field_get:protocol.Client.coordY)
  return _internal_coordy();
}
inline void Client::_internal_set_coordy(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.coordy_ = value;
}
inline void Client::set_coordy(int32_t value) {
  _internal_set_coordy(value);
  // @@protoc_insertion_point(field_set:protocol.Client.coordY)
}

// optional int32 coordZ = 7;
inline bool Client::_internal_has_coordz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Client::has_coordz() const {
  return _internal_has_coordz();
}
inline void Client::clear_coordz() {
  _impl_.coordz_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t Client::_internal_coordz() const {
  return _impl_.coordz_;
}
inline int32_t Client::coordz() const {
  // @@protoc_insertion_point(field_get:protocol.Client.coordZ)
  return _internal_coordz();
}
inline void Client::_internal_set_coordz(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.coordz_ = value;
}
inline void Client::set_coordz(int32_t value) {
  _internal_set_coordz(value);
  // @@protoc_insertion_point(field_set:protocol.Client.coordZ)
}

// optional int32 mapNum = 8;
inline bool Client::_internal_has_mapnum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Client::has_mapnum() const {
  return _internal_has_mapnum();
}
inline void Client::clear_mapnum() {
  _impl_.mapnum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t Client::_internal_mapnum() const {
  return _impl_.mapnum_;
}
inline int32_t Client::mapnum() const {
  // @@protoc_insertion_point(field_get:protocol.Client.mapNum)
  return _internal_mapnum();
}
inline void Client::_internal_set_mapnum(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.mapnum_ = value;
}
inline void Client::set_mapnum(int32_t value) {
  _internal_set_mapnum(value);
  // @@protoc_insertion_point(field_set:protocol.Client.mapNum)
}

// optional int32 blockPlayer_id = 9;
inline bool Client::_internal_has_blockplayer_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Client::has_blockplayer_id() const {
  return _internal_has_blockplayer_id();
}
inline void Client::clear_blockplayer_id() {
  _impl_.blockplayer_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t Client::_internal_blockplayer_id() const {
  return _impl_.blockplayer_id_;
}
inline int32_t Client::blockplayer_id() const {
  // @@protoc_insertion_point(field_get:protocol.Client.blockPlayer_id)
  return _internal_blockplayer_id();
}
inline void Client::_internal_set_blockplayer_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.blockplayer_id_ = value;
}
inline void Client::set_blockplayer_id(int32_t value) {
  _internal_set_blockplayer_id(value);
  // @@protoc_insertion_point(field_set:protocol.Client.blockPlayer_id)
}

// optional int32 talkInRoom_id = 10;
inline bool Client::_internal_has_talkinroom_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Client::has_talkinroom_id() const {
  return _internal_has_talkinroom_id();
}
inline void Client::clear_talkinroom_id() {
  _impl_.talkinroom_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t Client::_internal_talkinroom_id() const {
  return _impl_.talkinroom_id_;
}
inline int32_t Client::talkinroom_id() const {
  // @@protoc_insertion_point(field_get:protocol.Client.talkInRoom_id)
  return _internal_talkinroom_id();
}
inline void Client::_internal_set_talkinroom_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.talkinroom_id_ = value;
}
inline void Client::set_talkinroom_id(int32_t value) {
  _internal_set_talkinroom_id(value);
  // @@protoc_insertion_point(field_set:protocol.Client.talkInRoom_id)
}

// optional bool talkLocal = 11;
inline bool Client::_internal_has_talklocal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Client::has_talklocal() const {
  return _internal_has_talklocal();
}
inline void Client::clear_talklocal() {
  _impl_.talklocal_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool Client::_internal_talklocal() const {
  return _impl_.talklocal_;
}
inline bool Client::talklocal() const {
  // @@protoc_insertion_point(field_get:protocol.Client.talkLocal)
  return _internal_talklocal();
}
inline void Client::_internal_set_talklocal(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.talklocal_ = value;
}
inline void Client::set_talklocal(bool value) {
  _internal_set_talklocal(value);
  // @@protoc_insertion_point(field_set:protocol.Client.talkLocal)
}

// optional int32 sampleTime = 12;
inline bool Client::_internal_has_sampletime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Client::has_sampletime() const {
  return _internal_has_sampletime();
}
inline void Client::clear_sampletime() {
  _impl_.sampletime_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t Client::_internal_sampletime() const {
  return _impl_.sampletime_;
}
inline int32_t Client::sampletime() const {
  // @@protoc_insertion_point(field_get:protocol.Client.sampleTime)
  return _internal_sampletime();
}
inline void Client::_internal_set_sampletime(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.sampletime_ = value;
}
inline void Client::set_sampletime(int32_t value) {
  _internal_set_sampletime(value);
  // @@protoc_insertion_point(field_set:protocol.Client.sampleTime)
}

// optional .google.protobuf.Timestamp packetTime = 13;
inline bool Client::_internal_has_packettime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.packettime_ != nullptr);
  return value;
}
inline bool Client::has_packettime() const {
  return _internal_has_packettime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Client::_internal_packettime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.packettime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Client::packettime() const {
  // @@protoc_insertion_point(field_get:protocol.Client.packetTime)
  return _internal_packettime();
}
inline void Client::unsafe_arena_set_allocated_packettime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* packettime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packettime_);
  }
  _impl_.packettime_ = packettime;
  if (packettime) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.Client.packetTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Client::release_packettime() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.packettime_;
  _impl_.packettime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Client::unsafe_arena_release_packettime() {
  // @@protoc_insertion_point(field_release:protocol.Client.packetTime)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.packettime_;
  _impl_.packettime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Client::_internal_mutable_packettime() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.packettime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.packettime_ = p;
  }
  return _impl_.packettime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Client::mutable_packettime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_packettime();
  // @@protoc_insertion_point(field_mutable:protocol.Client.packetTime)
  return _msg;
}
inline void Client::set_allocated_packettime(::PROTOBUF_NAMESPACE_ID::Timestamp* packettime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packettime_);
  }
  if (packettime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packettime));
    if (message_arena != submessage_arena) {
      packettime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packettime, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.packettime_ = packettime;
  // @@protoc_insertion_point(field_set_allocated:protocol.Client.packetTime)
}

// -------------------------------------------------------------------

// Server

// optional bool handShake = 1;
inline bool Server::_internal_has_handshake() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Server::has_handshake() const {
  return _internal_has_handshake();
}
inline void Server::clear_handshake() {
  _impl_.handshake_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool Server::_internal_handshake() const {
  return _impl_.handshake_;
}
inline bool Server::handshake() const {
  // @@protoc_insertion_point(field_get:protocol.Server.handShake)
  return _internal_handshake();
}
inline void Server::_internal_set_handshake(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.handshake_ = value;
}
inline void Server::set_handshake(bool value) {
  _internal_set_handshake(value);
  // @@protoc_insertion_point(field_set:protocol.Server.handShake)
}

// int32 id = 2;
inline void Server::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Server::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Server::id() const {
  // @@protoc_insertion_point(field_get:protocol.Server.id)
  return _internal_id();
}
inline void Server::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Server::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.Server.id)
}

// optional bytes audio = 3;
inline bool Server::_internal_has_audio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Server::has_audio() const {
  return _internal_has_audio();
}
inline void Server::clear_audio() {
  _impl_.audio_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Server::audio() const {
  // @@protoc_insertion_point(field_get:protocol.Server.audio)
  return _internal_audio();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Server::set_audio(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.audio_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.Server.audio)
}
inline std::string* Server::mutable_audio() {
  std::string* _s = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:protocol.Server.audio)
  return _s;
}
inline const std::string& Server::_internal_audio() const {
  return _impl_.audio_.Get();
}
inline void Server::_internal_set_audio(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.audio_.Set(value, GetArenaForAllocation());
}
inline std::string* Server::_internal_mutable_audio() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.audio_.Mutable(GetArenaForAllocation());
}
inline std::string* Server::release_audio() {
  // @@protoc_insertion_point(field_release:protocol.Server.audio)
  if (!_internal_has_audio()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.audio_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.audio_.IsDefault()) {
    _impl_.audio_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Server::set_allocated_audio(std::string* audio) {
  if (audio != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.audio_.SetAllocated(audio, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.audio_.IsDefault()) {
    _impl_.audio_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.Server.audio)
}

// optional int32 audioNum = 4;
inline bool Server::_internal_has_audionum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Server::has_audionum() const {
  return _internal_has_audionum();
}
inline void Server::clear_audionum() {
  _impl_.audionum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Server::_internal_audionum() const {
  return _impl_.audionum_;
}
inline int32_t Server::audionum() const {
  // @@protoc_insertion_point(field_get:protocol.Server.audioNum)
  return _internal_audionum();
}
inline void Server::_internal_set_audionum(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.audionum_ = value;
}
inline void Server::set_audionum(int32_t value) {
  _internal_set_audionum(value);
  // @@protoc_insertion_point(field_set:protocol.Server.audioNum)
}

// optional int32 coordX = 5;
inline bool Server::_internal_has_coordx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Server::has_coordx() const {
  return _internal_has_coordx();
}
inline void Server::clear_coordx() {
  _impl_.coordx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Server::_internal_coordx() const {
  return _impl_.coordx_;
}
inline int32_t Server::coordx() const {
  // @@protoc_insertion_point(field_get:protocol.Server.coordX)
  return _internal_coordx();
}
inline void Server::_internal_set_coordx(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.coordx_ = value;
}
inline void Server::set_coordx(int32_t value) {
  _internal_set_coordx(value);
  // @@protoc_insertion_point(field_set:protocol.Server.coordX)
}

// optional int32 coordY = 6;
inline bool Server::_internal_has_coordy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Server::has_coordy() const {
  return _internal_has_coordy();
}
inline void Server::clear_coordy() {
  _impl_.coordy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t Server::_internal_coordy() const {
  return _impl_.coordy_;
}
inline int32_t Server::coordy() const {
  // @@protoc_insertion_point(field_get:protocol.Server.coordY)
  return _internal_coordy();
}
inline void Server::_internal_set_coordy(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.coordy_ = value;
}
inline void Server::set_coordy(int32_t value) {
  _internal_set_coordy(value);
  // @@protoc_insertion_point(field_set:protocol.Server.coordY)
}

// optional int32 coordZ = 7;
inline bool Server::_internal_has_coordz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Server::has_coordz() const {
  return _internal_has_coordz();
}
inline void Server::clear_coordz() {
  _impl_.coordz_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t Server::_internal_coordz() const {
  return _impl_.coordz_;
}
inline int32_t Server::coordz() const {
  // @@protoc_insertion_point(field_get:protocol.Server.coordZ)
  return _internal_coordz();
}
inline void Server::_internal_set_coordz(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.coordz_ = value;
}
inline void Server::set_coordz(int32_t value) {
  _internal_set_coordz(value);
  // @@protoc_insertion_point(field_set:protocol.Server.coordZ)
}

// optional int32 mapNum = 8;
inline bool Server::_internal_has_mapnum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Server::has_mapnum() const {
  return _internal_has_mapnum();
}
inline void Server::clear_mapnum() {
  _impl_.mapnum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t Server::_internal_mapnum() const {
  return _impl_.mapnum_;
}
inline int32_t Server::mapnum() const {
  // @@protoc_insertion_point(field_get:protocol.Server.mapNum)
  return _internal_mapnum();
}
inline void Server::_internal_set_mapnum(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.mapnum_ = value;
}
inline void Server::set_mapnum(int32_t value) {
  _internal_set_mapnum(value);
  // @@protoc_insertion_point(field_set:protocol.Server.mapNum)
}

// optional int32 sampleTime = 9;
inline bool Server::_internal_has_sampletime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Server::has_sampletime() const {
  return _internal_has_sampletime();
}
inline void Server::clear_sampletime() {
  _impl_.sampletime_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t Server::_internal_sampletime() const {
  return _impl_.sampletime_;
}
inline int32_t Server::sampletime() const {
  // @@protoc_insertion_point(field_get:protocol.Server.sampleTime)
  return _internal_sampletime();
}
inline void Server::_internal_set_sampletime(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.sampletime_ = value;
}
inline void Server::set_sampletime(int32_t value) {
  _internal_set_sampletime(value);
  // @@protoc_insertion_point(field_set:protocol.Server.sampleTime)
}

// optional bool notConnected = 10;
inline bool Server::_internal_has_notconnected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Server::has_notconnected() const {
  return _internal_has_notconnected();
}
inline void Server::clear_notconnected() {
  _impl_.notconnected_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool Server::_internal_notconnected() const {
  return _impl_.notconnected_;
}
inline bool Server::notconnected() const {
  // @@protoc_insertion_point(field_get:protocol.Server.notConnected)
  return _internal_notconnected();
}
inline void Server::_internal_set_notconnected(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.notconnected_ = value;
}
inline void Server::set_notconnected(bool value) {
  _internal_set_notconnected(value);
  // @@protoc_insertion_point(field_set:protocol.Server.notConnected)
}

// optional .google.protobuf.Timestamp packetTime = 11;
inline bool Server::_internal_has_packettime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.packettime_ != nullptr);
  return value;
}
inline bool Server::has_packettime() const {
  return _internal_has_packettime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Server::_internal_packettime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.packettime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Server::packettime() const {
  // @@protoc_insertion_point(field_get:protocol.Server.packetTime)
  return _internal_packettime();
}
inline void Server::unsafe_arena_set_allocated_packettime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* packettime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packettime_);
  }
  _impl_.packettime_ = packettime;
  if (packettime) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.Server.packetTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Server::release_packettime() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.packettime_;
  _impl_.packettime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Server::unsafe_arena_release_packettime() {
  // @@protoc_insertion_point(field_release:protocol.Server.packetTime)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.packettime_;
  _impl_.packettime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Server::_internal_mutable_packettime() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.packettime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.packettime_ = p;
  }
  return _impl_.packettime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Server::mutable_packettime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_packettime();
  // @@protoc_insertion_point(field_mutable:protocol.Server.packetTime)
  return _msg;
}
inline void Server::set_allocated_packettime(::PROTOBUF_NAMESPACE_ID::Timestamp* packettime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packettime_);
  }
  if (packettime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packettime));
    if (message_arena != submessage_arena) {
      packettime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packettime, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.packettime_ = packettime;
  // @@protoc_insertion_point(field_set_allocated:protocol.Server.packetTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
