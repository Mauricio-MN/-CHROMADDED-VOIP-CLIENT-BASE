// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_protocol_2eproto;
namespace protocol {
class Client;
struct ClientDefaultTypeInternal;
extern ClientDefaultTypeInternal _Client_default_instance_;
class ClientAudio;
struct ClientAudioDefaultTypeInternal;
extern ClientAudioDefaultTypeInternal _ClientAudio_default_instance_;
class ClientBase;
struct ClientBaseDefaultTypeInternal;
extern ClientBaseDefaultTypeInternal _ClientBase_default_instance_;
class Server;
struct ServerDefaultTypeInternal;
extern ServerDefaultTypeInternal _Server_default_instance_;
}  // namespace protocol
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace protocol {

// ===================================================================


// -------------------------------------------------------------------

class ClientAudio final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.ClientAudio) */ {
 public:
  inline ClientAudio() : ClientAudio(nullptr) {}
  ~ClientAudio() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientAudio(::google::protobuf::internal::ConstantInitialized);

  inline ClientAudio(const ClientAudio& from)
      : ClientAudio(nullptr, from) {}
  ClientAudio(ClientAudio&& from) noexcept
    : ClientAudio() {
    *this = ::std::move(from);
  }

  inline ClientAudio& operator=(const ClientAudio& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientAudio& operator=(ClientAudio&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientAudio& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientAudio* internal_default_instance() {
    return reinterpret_cast<const ClientAudio*>(
               &_ClientAudio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientAudio& a, ClientAudio& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientAudio* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientAudio* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientAudio* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientAudio>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientAudio& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ClientAudio& from) {
    ClientAudio::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ClientAudio* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protocol.ClientAudio";
  }
  protected:
  explicit ClientAudio(::google::protobuf::Arena* arena);
  ClientAudio(::google::protobuf::Arena* arena, const ClientAudio& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 2,
    kIdFieldNumber = 1,
    kAudioNumFieldNumber = 3,
    kSampleTimeFieldNumber = 4,
  };
  // optional bytes audio = 2;
  bool has_audio() const;
  void clear_audio() ;
  const std::string& audio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio(Arg_&& arg, Args_... args);
  std::string* mutable_audio();
  PROTOBUF_NODISCARD std::string* release_audio();
  void set_allocated_audio(std::string* value);

  private:
  const std::string& _internal_audio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio(
      const std::string& value);
  std::string* _internal_mutable_audio();

  public:
  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // optional uint32 audioNum = 3;
  bool has_audionum() const;
  void clear_audionum() ;
  ::uint32_t audionum() const;
  void set_audionum(::uint32_t value);

  private:
  ::uint32_t _internal_audionum() const;
  void _internal_set_audionum(::uint32_t value);

  public:
  // optional uint32 sampleTime = 4;
  bool has_sampletime() const;
  void clear_sampletime() ;
  ::uint32_t sampletime() const;
  void set_sampletime(::uint32_t value);

  private:
  ::uint32_t _internal_sampletime() const;
  void _internal_set_sampletime(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protocol.ClientAudio)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr audio_;
    ::uint32_t id_;
    ::uint32_t audionum_;
    ::uint32_t sampletime_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};// -------------------------------------------------------------------

class Server final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.Server) */ {
 public:
  inline Server() : Server(nullptr) {}
  ~Server() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Server(::google::protobuf::internal::ConstantInitialized);

  inline Server(const Server& from)
      : Server(nullptr, from) {}
  Server(Server&& from) noexcept
    : Server() {
    *this = ::std::move(from);
  }

  inline Server& operator=(const Server& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server& operator=(Server&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Server& default_instance() {
    return *internal_default_instance();
  }
  static inline const Server* internal_default_instance() {
    return reinterpret_cast<const Server*>(
               &_Server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Server& a, Server& b) {
    a.Swap(&b);
  }
  inline void Swap(Server* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Server* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Server* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Server>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Server& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Server& from) {
    Server::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Server* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protocol.Server";
  }
  protected:
  explicit Server(::google::protobuf::Arena* arena);
  Server(::google::protobuf::Arena* arena, const Server& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraClientMSGFieldNumber = 13,
    kAudioFieldNumber = 3,
    kPacketTimeFieldNumber = 12,
    kIdFieldNumber = 2,
    kAudioNumFieldNumber = 4,
    kCoordXFieldNumber = 5,
    kCoordYFieldNumber = 6,
    kCoordZFieldNumber = 7,
    kHandShakeFieldNumber = 1,
    kInvalidSessionFieldNumber = 10,
    kIsGroupFieldNumber = 11,
    kMapNumFieldNumber = 8,
    kSampleTimeFieldNumber = 9,
  };
  // repeated bytes extraClientMSG = 13;
  int extraclientmsg_size() const;
  private:
  int _internal_extraclientmsg_size() const;

  public:
  void clear_extraclientmsg() ;
  const std::string& extraclientmsg(int index) const;
  std::string* mutable_extraclientmsg(int index);
  void set_extraclientmsg(int index, const std::string& value);
  void set_extraclientmsg(int index, std::string&& value);
  void set_extraclientmsg(int index, const char* value);
  void set_extraclientmsg(int index, const void* value, std::size_t size);
  void set_extraclientmsg(int index, absl::string_view value);
  std::string* add_extraclientmsg();
  void add_extraclientmsg(const std::string& value);
  void add_extraclientmsg(std::string&& value);
  void add_extraclientmsg(const char* value);
  void add_extraclientmsg(const void* value, std::size_t size);
  void add_extraclientmsg(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& extraclientmsg() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_extraclientmsg();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_extraclientmsg() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_extraclientmsg();

  public:
  // optional bytes audio = 3;
  bool has_audio() const;
  void clear_audio() ;
  const std::string& audio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio(Arg_&& arg, Args_... args);
  std::string* mutable_audio();
  PROTOBUF_NODISCARD std::string* release_audio();
  void set_allocated_audio(std::string* value);

  private:
  const std::string& _internal_audio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio(
      const std::string& value);
  std::string* _internal_mutable_audio();

  public:
  // optional .google.protobuf.Timestamp packetTime = 12;
  bool has_packettime() const;
  void clear_packettime() ;
  const ::google::protobuf::Timestamp& packettime() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_packettime();
  ::google::protobuf::Timestamp* mutable_packettime();
  void set_allocated_packettime(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_packettime(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_packettime();

  private:
  const ::google::protobuf::Timestamp& _internal_packettime() const;
  ::google::protobuf::Timestamp* _internal_mutable_packettime();

  public:
  // uint32 id = 2;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // optional uint32 audioNum = 4;
  bool has_audionum() const;
  void clear_audionum() ;
  ::uint32_t audionum() const;
  void set_audionum(::uint32_t value);

  private:
  ::uint32_t _internal_audionum() const;
  void _internal_set_audionum(::uint32_t value);

  public:
  // optional float coordX = 5;
  bool has_coordx() const;
  void clear_coordx() ;
  float coordx() const;
  void set_coordx(float value);

  private:
  float _internal_coordx() const;
  void _internal_set_coordx(float value);

  public:
  // optional float coordY = 6;
  bool has_coordy() const;
  void clear_coordy() ;
  float coordy() const;
  void set_coordy(float value);

  private:
  float _internal_coordy() const;
  void _internal_set_coordy(float value);

  public:
  // optional float coordZ = 7;
  bool has_coordz() const;
  void clear_coordz() ;
  float coordz() const;
  void set_coordz(float value);

  private:
  float _internal_coordz() const;
  void _internal_set_coordz(float value);

  public:
  // optional bool handShake = 1;
  bool has_handshake() const;
  void clear_handshake() ;
  bool handshake() const;
  void set_handshake(bool value);

  private:
  bool _internal_handshake() const;
  void _internal_set_handshake(bool value);

  public:
  // optional bool InvalidSession = 10;
  bool has_invalidsession() const;
  void clear_invalidsession() ;
  bool invalidsession() const;
  void set_invalidsession(bool value);

  private:
  bool _internal_invalidsession() const;
  void _internal_set_invalidsession(bool value);

  public:
  // optional bool isGroup = 11;
  bool has_isgroup() const;
  void clear_isgroup() ;
  bool isgroup() const;
  void set_isgroup(bool value);

  private:
  bool _internal_isgroup() const;
  void _internal_set_isgroup(bool value);

  public:
  // optional uint32 mapNum = 8;
  bool has_mapnum() const;
  void clear_mapnum() ;
  ::uint32_t mapnum() const;
  void set_mapnum(::uint32_t value);

  private:
  ::uint32_t _internal_mapnum() const;
  void _internal_set_mapnum(::uint32_t value);

  public:
  // optional uint32 sampleTime = 9;
  bool has_sampletime() const;
  void clear_sampletime() ;
  ::uint32_t sampletime() const;
  void set_sampletime(::uint32_t value);

  private:
  ::uint32_t _internal_sampletime() const;
  void _internal_set_sampletime(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protocol.Server)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> extraclientmsg_;
    ::google::protobuf::internal::ArenaStringPtr audio_;
    ::google::protobuf::Timestamp* packettime_;
    ::uint32_t id_;
    ::uint32_t audionum_;
    float coordx_;
    float coordy_;
    float coordz_;
    bool handshake_;
    bool invalidsession_;
    bool isgroup_;
    ::uint32_t mapnum_;
    ::uint32_t sampletime_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};// -------------------------------------------------------------------

class Client final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.Client) */ {
 public:
  inline Client() : Client(nullptr) {}
  ~Client() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Client(::google::protobuf::internal::ConstantInitialized);

  inline Client(const Client& from)
      : Client(nullptr, from) {}
  Client(Client&& from) noexcept
    : Client() {
    *this = ::std::move(from);
  }

  inline Client& operator=(const Client& from) {
    CopyFrom(from);
    return *this;
  }
  inline Client& operator=(Client&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Client& default_instance() {
    return *internal_default_instance();
  }
  static inline const Client* internal_default_instance() {
    return reinterpret_cast<const Client*>(
               &_Client_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Client& a, Client& b) {
    a.Swap(&b);
  }
  inline void Swap(Client* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Client* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Client* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Client>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Client& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Client& from) {
    Client::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Client* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protocol.Client";
  }
  protected:
  explicit Client(::google::protobuf::Arena* arena);
  Client(::google::protobuf::Arena* arena, const Client& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 3,
    kPacketTimeFieldNumber = 10,
    kSecretIdFieldNumber = 1,
    kIdFieldNumber = 2,
    kAudioNumFieldNumber = 4,
    kCoordXFieldNumber = 5,
    kCoordYFieldNumber = 6,
    kCoordZFieldNumber = 7,
    kMapNumFieldNumber = 8,
    kSampleTimeFieldNumber = 9,
  };
  // optional bytes audio = 3;
  bool has_audio() const;
  void clear_audio() ;
  const std::string& audio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio(Arg_&& arg, Args_... args);
  std::string* mutable_audio();
  PROTOBUF_NODISCARD std::string* release_audio();
  void set_allocated_audio(std::string* value);

  private:
  const std::string& _internal_audio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio(
      const std::string& value);
  std::string* _internal_mutable_audio();

  public:
  // optional .google.protobuf.Timestamp packetTime = 10;
  bool has_packettime() const;
  void clear_packettime() ;
  const ::google::protobuf::Timestamp& packettime() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_packettime();
  ::google::protobuf::Timestamp* mutable_packettime();
  void set_allocated_packettime(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_packettime(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_packettime();

  private:
  const ::google::protobuf::Timestamp& _internal_packettime() const;
  ::google::protobuf::Timestamp* _internal_mutable_packettime();

  public:
  // optional uint32 secret_id = 1;
  bool has_secret_id() const;
  void clear_secret_id() ;
  ::uint32_t secret_id() const;
  void set_secret_id(::uint32_t value);

  private:
  ::uint32_t _internal_secret_id() const;
  void _internal_set_secret_id(::uint32_t value);

  public:
  // optional uint32 id = 2;
  bool has_id() const;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // optional uint32 audioNum = 4;
  bool has_audionum() const;
  void clear_audionum() ;
  ::uint32_t audionum() const;
  void set_audionum(::uint32_t value);

  private:
  ::uint32_t _internal_audionum() const;
  void _internal_set_audionum(::uint32_t value);

  public:
  // optional float coordX = 5;
  bool has_coordx() const;
  void clear_coordx() ;
  float coordx() const;
  void set_coordx(float value);

  private:
  float _internal_coordx() const;
  void _internal_set_coordx(float value);

  public:
  // optional float coordY = 6;
  bool has_coordy() const;
  void clear_coordy() ;
  float coordy() const;
  void set_coordy(float value);

  private:
  float _internal_coordy() const;
  void _internal_set_coordy(float value);

  public:
  // optional float coordZ = 7;
  bool has_coordz() const;
  void clear_coordz() ;
  float coordz() const;
  void set_coordz(float value);

  private:
  float _internal_coordz() const;
  void _internal_set_coordz(float value);

  public:
  // optional uint32 mapNum = 8;
  bool has_mapnum() const;
  void clear_mapnum() ;
  ::uint32_t mapnum() const;
  void set_mapnum(::uint32_t value);

  private:
  ::uint32_t _internal_mapnum() const;
  void _internal_set_mapnum(::uint32_t value);

  public:
  // optional uint32 sampleTime = 9;
  bool has_sampletime() const;
  void clear_sampletime() ;
  ::uint32_t sampletime() const;
  void set_sampletime(::uint32_t value);

  private:
  ::uint32_t _internal_sampletime() const;
  void _internal_set_sampletime(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protocol.Client)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr audio_;
    ::google::protobuf::Timestamp* packettime_;
    ::uint32_t secret_id_;
    ::uint32_t id_;
    ::uint32_t audionum_;
    float coordx_;
    float coordy_;
    float coordz_;
    ::uint32_t mapnum_;
    ::uint32_t sampletime_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};// -------------------------------------------------------------------

class ClientBase final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.ClientBase) */ {
 public:
  inline ClientBase() : ClientBase(nullptr) {}
  ~ClientBase() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientBase(::google::protobuf::internal::ConstantInitialized);

  inline ClientBase(const ClientBase& from)
      : ClientBase(nullptr, from) {}
  ClientBase(ClientBase&& from) noexcept
    : ClientBase() {
    *this = ::std::move(from);
  }

  inline ClientBase& operator=(const ClientBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientBase& operator=(ClientBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientBase* internal_default_instance() {
    return reinterpret_cast<const ClientBase*>(
               &_ClientBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientBase& a, ClientBase& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientBase* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientBase* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientBase>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientBase& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ClientBase& from) {
    ClientBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ClientBase* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protocol.ClientBase";
  }
  protected:
  explicit ClientBase(::google::protobuf::Arena* arena);
  ClientBase(::google::protobuf::Arena* arena, const ClientBase& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientExtAudioFieldNumber = 1,
    kClientExtFieldNumber = 2,
  };
  // optional .protocol.ClientAudio clientExtAudio = 1;
  bool has_clientextaudio() const;
  void clear_clientextaudio() ;
  const ::protocol::ClientAudio& clientextaudio() const;
  PROTOBUF_NODISCARD ::protocol::ClientAudio* release_clientextaudio();
  ::protocol::ClientAudio* mutable_clientextaudio();
  void set_allocated_clientextaudio(::protocol::ClientAudio* value);
  void unsafe_arena_set_allocated_clientextaudio(::protocol::ClientAudio* value);
  ::protocol::ClientAudio* unsafe_arena_release_clientextaudio();

  private:
  const ::protocol::ClientAudio& _internal_clientextaudio() const;
  ::protocol::ClientAudio* _internal_mutable_clientextaudio();

  public:
  // optional .protocol.Client clientExt = 2;
  bool has_clientext() const;
  void clear_clientext() ;
  const ::protocol::Client& clientext() const;
  PROTOBUF_NODISCARD ::protocol::Client* release_clientext();
  ::protocol::Client* mutable_clientext();
  void set_allocated_clientext(::protocol::Client* value);
  void unsafe_arena_set_allocated_clientext(::protocol::Client* value);
  ::protocol::Client* unsafe_arena_release_clientext();

  private:
  const ::protocol::Client& _internal_clientext() const;
  ::protocol::Client* _internal_mutable_clientext();

  public:
  // @@protoc_insertion_point(class_scope:protocol.ClientBase)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::protocol::ClientAudio* clientextaudio_;
    ::protocol::Client* clientext_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ClientBase

// optional .protocol.ClientAudio clientExtAudio = 1;
inline bool ClientBase::has_clientextaudio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.clientextaudio_ != nullptr);
  return value;
}
inline void ClientBase::clear_clientextaudio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.clientextaudio_ != nullptr) _impl_.clientextaudio_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::protocol::ClientAudio& ClientBase::_internal_clientextaudio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::protocol::ClientAudio* p = _impl_.clientextaudio_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::ClientAudio&>(::protocol::_ClientAudio_default_instance_);
}
inline const ::protocol::ClientAudio& ClientBase::clientextaudio() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protocol.ClientBase.clientExtAudio)
  return _internal_clientextaudio();
}
inline void ClientBase::unsafe_arena_set_allocated_clientextaudio(::protocol::ClientAudio* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.clientextaudio_);
  }
  _impl_.clientextaudio_ = reinterpret_cast<::protocol::ClientAudio*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.ClientBase.clientExtAudio)
}
inline ::protocol::ClientAudio* ClientBase::release_clientextaudio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protocol::ClientAudio* released = _impl_.clientextaudio_;
  _impl_.clientextaudio_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::protocol::ClientAudio* ClientBase::unsafe_arena_release_clientextaudio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protocol.ClientBase.clientExtAudio)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protocol::ClientAudio* temp = _impl_.clientextaudio_;
  _impl_.clientextaudio_ = nullptr;
  return temp;
}
inline ::protocol::ClientAudio* ClientBase::_internal_mutable_clientextaudio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.clientextaudio_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::ClientAudio>(GetArena());
    _impl_.clientextaudio_ = reinterpret_cast<::protocol::ClientAudio*>(p);
  }
  return _impl_.clientextaudio_;
}
inline ::protocol::ClientAudio* ClientBase::mutable_clientextaudio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::protocol::ClientAudio* _msg = _internal_mutable_clientextaudio();
  // @@protoc_insertion_point(field_mutable:protocol.ClientBase.clientExtAudio)
  return _msg;
}
inline void ClientBase::set_allocated_clientextaudio(::protocol::ClientAudio* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::protocol::ClientAudio*>(_impl_.clientextaudio_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::protocol::ClientAudio*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.clientextaudio_ = reinterpret_cast<::protocol::ClientAudio*>(value);
  // @@protoc_insertion_point(field_set_allocated:protocol.ClientBase.clientExtAudio)
}

// optional .protocol.Client clientExt = 2;
inline bool ClientBase::has_clientext() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.clientext_ != nullptr);
  return value;
}
inline void ClientBase::clear_clientext() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.clientext_ != nullptr) _impl_.clientext_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::protocol::Client& ClientBase::_internal_clientext() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::protocol::Client* p = _impl_.clientext_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Client&>(::protocol::_Client_default_instance_);
}
inline const ::protocol::Client& ClientBase::clientext() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protocol.ClientBase.clientExt)
  return _internal_clientext();
}
inline void ClientBase::unsafe_arena_set_allocated_clientext(::protocol::Client* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.clientext_);
  }
  _impl_.clientext_ = reinterpret_cast<::protocol::Client*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.ClientBase.clientExt)
}
inline ::protocol::Client* ClientBase::release_clientext() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::protocol::Client* released = _impl_.clientext_;
  _impl_.clientext_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::protocol::Client* ClientBase::unsafe_arena_release_clientext() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protocol.ClientBase.clientExt)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::protocol::Client* temp = _impl_.clientext_;
  _impl_.clientext_ = nullptr;
  return temp;
}
inline ::protocol::Client* ClientBase::_internal_mutable_clientext() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.clientext_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Client>(GetArena());
    _impl_.clientext_ = reinterpret_cast<::protocol::Client*>(p);
  }
  return _impl_.clientext_;
}
inline ::protocol::Client* ClientBase::mutable_clientext() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::protocol::Client* _msg = _internal_mutable_clientext();
  // @@protoc_insertion_point(field_mutable:protocol.ClientBase.clientExt)
  return _msg;
}
inline void ClientBase::set_allocated_clientext(::protocol::Client* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::protocol::Client*>(_impl_.clientext_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::protocol::Client*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.clientext_ = reinterpret_cast<::protocol::Client*>(value);
  // @@protoc_insertion_point(field_set_allocated:protocol.ClientBase.clientExt)
}

// -------------------------------------------------------------------

// Client

// optional uint32 secret_id = 1;
inline bool Client::has_secret_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Client::clear_secret_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.secret_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Client::secret_id() const {
  // @@protoc_insertion_point(field_get:protocol.Client.secret_id)
  return _internal_secret_id();
}
inline void Client::set_secret_id(::uint32_t value) {
  _internal_set_secret_id(value);
  // @@protoc_insertion_point(field_set:protocol.Client.secret_id)
}
inline ::uint32_t Client::_internal_secret_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.secret_id_;
}
inline void Client::_internal_set_secret_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.secret_id_ = value;
}

// optional uint32 id = 2;
inline bool Client::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Client::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Client::id() const {
  // @@protoc_insertion_point(field_get:protocol.Client.id)
  return _internal_id();
}
inline void Client::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.Client.id)
}
inline ::uint32_t Client::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void Client::_internal_set_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.id_ = value;
}

// optional bytes audio = 3;
inline bool Client::has_audio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Client::clear_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Client::audio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protocol.Client.audio)
  return _internal_audio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Client::set_audio(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.audio_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protocol.Client.audio)
}
inline std::string* Client::mutable_audio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:protocol.Client.audio)
  return _s;
}
inline const std::string& Client::_internal_audio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.audio_.Get();
}
inline void Client::_internal_set_audio(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.audio_.Set(value, GetArena());
}
inline std::string* Client::_internal_mutable_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.audio_.Mutable( GetArena());
}
inline std::string* Client::release_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protocol.Client.audio)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.audio_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.audio_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Client::set_allocated_audio(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.audio_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.audio_.IsDefault()) {
          _impl_.audio_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.Client.audio)
}

// optional uint32 audioNum = 4;
inline bool Client::has_audionum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Client::clear_audionum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audionum_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Client::audionum() const {
  // @@protoc_insertion_point(field_get:protocol.Client.audioNum)
  return _internal_audionum();
}
inline void Client::set_audionum(::uint32_t value) {
  _internal_set_audionum(value);
  // @@protoc_insertion_point(field_set:protocol.Client.audioNum)
}
inline ::uint32_t Client::_internal_audionum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.audionum_;
}
inline void Client::_internal_set_audionum(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.audionum_ = value;
}

// optional float coordX = 5;
inline bool Client::has_coordx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Client::clear_coordx() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coordx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float Client::coordx() const {
  // @@protoc_insertion_point(field_get:protocol.Client.coordX)
  return _internal_coordx();
}
inline void Client::set_coordx(float value) {
  _internal_set_coordx(value);
  // @@protoc_insertion_point(field_set:protocol.Client.coordX)
}
inline float Client::_internal_coordx() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coordx_;
}
inline void Client::_internal_set_coordx(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.coordx_ = value;
}

// optional float coordY = 6;
inline bool Client::has_coordy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Client::clear_coordy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coordy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float Client::coordy() const {
  // @@protoc_insertion_point(field_get:protocol.Client.coordY)
  return _internal_coordy();
}
inline void Client::set_coordy(float value) {
  _internal_set_coordy(value);
  // @@protoc_insertion_point(field_set:protocol.Client.coordY)
}
inline float Client::_internal_coordy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coordy_;
}
inline void Client::_internal_set_coordy(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.coordy_ = value;
}

// optional float coordZ = 7;
inline bool Client::has_coordz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Client::clear_coordz() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coordz_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float Client::coordz() const {
  // @@protoc_insertion_point(field_get:protocol.Client.coordZ)
  return _internal_coordz();
}
inline void Client::set_coordz(float value) {
  _internal_set_coordz(value);
  // @@protoc_insertion_point(field_set:protocol.Client.coordZ)
}
inline float Client::_internal_coordz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coordz_;
}
inline void Client::_internal_set_coordz(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.coordz_ = value;
}

// optional uint32 mapNum = 8;
inline bool Client::has_mapnum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Client::clear_mapnum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mapnum_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t Client::mapnum() const {
  // @@protoc_insertion_point(field_get:protocol.Client.mapNum)
  return _internal_mapnum();
}
inline void Client::set_mapnum(::uint32_t value) {
  _internal_set_mapnum(value);
  // @@protoc_insertion_point(field_set:protocol.Client.mapNum)
}
inline ::uint32_t Client::_internal_mapnum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mapnum_;
}
inline void Client::_internal_set_mapnum(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.mapnum_ = value;
}

// optional uint32 sampleTime = 9;
inline bool Client::has_sampletime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Client::clear_sampletime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sampletime_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t Client::sampletime() const {
  // @@protoc_insertion_point(field_get:protocol.Client.sampleTime)
  return _internal_sampletime();
}
inline void Client::set_sampletime(::uint32_t value) {
  _internal_set_sampletime(value);
  // @@protoc_insertion_point(field_set:protocol.Client.sampleTime)
}
inline ::uint32_t Client::_internal_sampletime() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sampletime_;
}
inline void Client::_internal_set_sampletime(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.sampletime_ = value;
}

// optional .google.protobuf.Timestamp packetTime = 10;
inline bool Client::has_packettime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.packettime_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Client::_internal_packettime() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.packettime_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Client::packettime() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protocol.Client.packetTime)
  return _internal_packettime();
}
inline void Client::unsafe_arena_set_allocated_packettime(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.packettime_);
  }
  _impl_.packettime_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.Client.packetTime)
}
inline ::google::protobuf::Timestamp* Client::release_packettime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.packettime_;
  _impl_.packettime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Client::unsafe_arena_release_packettime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protocol.Client.packetTime)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.packettime_;
  _impl_.packettime_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Client::_internal_mutable_packettime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.packettime_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.packettime_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.packettime_;
}
inline ::google::protobuf::Timestamp* Client::mutable_packettime() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_packettime();
  // @@protoc_insertion_point(field_mutable:protocol.Client.packetTime)
  return _msg;
}
inline void Client::set_allocated_packettime(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.packettime_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.packettime_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:protocol.Client.packetTime)
}

// -------------------------------------------------------------------

// ClientAudio

// optional uint32 id = 1;
inline bool ClientAudio::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ClientAudio::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t ClientAudio::id() const {
  // @@protoc_insertion_point(field_get:protocol.ClientAudio.id)
  return _internal_id();
}
inline void ClientAudio::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.ClientAudio.id)
}
inline ::uint32_t ClientAudio::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void ClientAudio::_internal_set_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}

// optional bytes audio = 2;
inline bool ClientAudio::has_audio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ClientAudio::clear_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientAudio::audio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protocol.ClientAudio.audio)
  return _internal_audio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientAudio::set_audio(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.audio_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protocol.ClientAudio.audio)
}
inline std::string* ClientAudio::mutable_audio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:protocol.ClientAudio.audio)
  return _s;
}
inline const std::string& ClientAudio::_internal_audio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.audio_.Get();
}
inline void ClientAudio::_internal_set_audio(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.audio_.Set(value, GetArena());
}
inline std::string* ClientAudio::_internal_mutable_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.audio_.Mutable( GetArena());
}
inline std::string* ClientAudio::release_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protocol.ClientAudio.audio)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.audio_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.audio_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ClientAudio::set_allocated_audio(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.audio_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.audio_.IsDefault()) {
          _impl_.audio_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ClientAudio.audio)
}

// optional uint32 audioNum = 3;
inline bool ClientAudio::has_audionum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ClientAudio::clear_audionum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audionum_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t ClientAudio::audionum() const {
  // @@protoc_insertion_point(field_get:protocol.ClientAudio.audioNum)
  return _internal_audionum();
}
inline void ClientAudio::set_audionum(::uint32_t value) {
  _internal_set_audionum(value);
  // @@protoc_insertion_point(field_set:protocol.ClientAudio.audioNum)
}
inline ::uint32_t ClientAudio::_internal_audionum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.audionum_;
}
inline void ClientAudio::_internal_set_audionum(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.audionum_ = value;
}

// optional uint32 sampleTime = 4;
inline bool ClientAudio::has_sampletime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ClientAudio::clear_sampletime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sampletime_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t ClientAudio::sampletime() const {
  // @@protoc_insertion_point(field_get:protocol.ClientAudio.sampleTime)
  return _internal_sampletime();
}
inline void ClientAudio::set_sampletime(::uint32_t value) {
  _internal_set_sampletime(value);
  // @@protoc_insertion_point(field_set:protocol.ClientAudio.sampleTime)
}
inline ::uint32_t ClientAudio::_internal_sampletime() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sampletime_;
}
inline void ClientAudio::_internal_set_sampletime(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.sampletime_ = value;
}

// -------------------------------------------------------------------

// Server

// optional bool handShake = 1;
inline bool Server::has_handshake() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Server::clear_handshake() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.handshake_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool Server::handshake() const {
  // @@protoc_insertion_point(field_get:protocol.Server.handShake)
  return _internal_handshake();
}
inline void Server::set_handshake(bool value) {
  _internal_set_handshake(value);
  // @@protoc_insertion_point(field_set:protocol.Server.handShake)
}
inline bool Server::_internal_handshake() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.handshake_;
}
inline void Server::_internal_set_handshake(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.handshake_ = value;
}

// uint32 id = 2;
inline void Server::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0u;
}
inline ::uint32_t Server::id() const {
  // @@protoc_insertion_point(field_get:protocol.Server.id)
  return _internal_id();
}
inline void Server::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.Server.id)
}
inline ::uint32_t Server::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void Server::_internal_set_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// optional bytes audio = 3;
inline bool Server::has_audio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Server::clear_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Server::audio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protocol.Server.audio)
  return _internal_audio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Server::set_audio(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.audio_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protocol.Server.audio)
}
inline std::string* Server::mutable_audio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:protocol.Server.audio)
  return _s;
}
inline const std::string& Server::_internal_audio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.audio_.Get();
}
inline void Server::_internal_set_audio(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.audio_.Set(value, GetArena());
}
inline std::string* Server::_internal_mutable_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.audio_.Mutable( GetArena());
}
inline std::string* Server::release_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protocol.Server.audio)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.audio_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.audio_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Server::set_allocated_audio(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.audio_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.audio_.IsDefault()) {
          _impl_.audio_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.Server.audio)
}

// optional uint32 audioNum = 4;
inline bool Server::has_audionum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Server::clear_audionum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audionum_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Server::audionum() const {
  // @@protoc_insertion_point(field_get:protocol.Server.audioNum)
  return _internal_audionum();
}
inline void Server::set_audionum(::uint32_t value) {
  _internal_set_audionum(value);
  // @@protoc_insertion_point(field_set:protocol.Server.audioNum)
}
inline ::uint32_t Server::_internal_audionum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.audionum_;
}
inline void Server::_internal_set_audionum(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.audionum_ = value;
}

// optional float coordX = 5;
inline bool Server::has_coordx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Server::clear_coordx() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coordx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Server::coordx() const {
  // @@protoc_insertion_point(field_get:protocol.Server.coordX)
  return _internal_coordx();
}
inline void Server::set_coordx(float value) {
  _internal_set_coordx(value);
  // @@protoc_insertion_point(field_set:protocol.Server.coordX)
}
inline float Server::_internal_coordx() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coordx_;
}
inline void Server::_internal_set_coordx(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.coordx_ = value;
}

// optional float coordY = 6;
inline bool Server::has_coordy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Server::clear_coordy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coordy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float Server::coordy() const {
  // @@protoc_insertion_point(field_get:protocol.Server.coordY)
  return _internal_coordy();
}
inline void Server::set_coordy(float value) {
  _internal_set_coordy(value);
  // @@protoc_insertion_point(field_set:protocol.Server.coordY)
}
inline float Server::_internal_coordy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coordy_;
}
inline void Server::_internal_set_coordy(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.coordy_ = value;
}

// optional float coordZ = 7;
inline bool Server::has_coordz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Server::clear_coordz() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coordz_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float Server::coordz() const {
  // @@protoc_insertion_point(field_get:protocol.Server.coordZ)
  return _internal_coordz();
}
inline void Server::set_coordz(float value) {
  _internal_set_coordz(value);
  // @@protoc_insertion_point(field_set:protocol.Server.coordZ)
}
inline float Server::_internal_coordz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coordz_;
}
inline void Server::_internal_set_coordz(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.coordz_ = value;
}

// optional uint32 mapNum = 8;
inline bool Server::has_mapnum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Server::clear_mapnum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mapnum_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t Server::mapnum() const {
  // @@protoc_insertion_point(field_get:protocol.Server.mapNum)
  return _internal_mapnum();
}
inline void Server::set_mapnum(::uint32_t value) {
  _internal_set_mapnum(value);
  // @@protoc_insertion_point(field_set:protocol.Server.mapNum)
}
inline ::uint32_t Server::_internal_mapnum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mapnum_;
}
inline void Server::_internal_set_mapnum(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.mapnum_ = value;
}

// optional uint32 sampleTime = 9;
inline bool Server::has_sampletime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Server::clear_sampletime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sampletime_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t Server::sampletime() const {
  // @@protoc_insertion_point(field_get:protocol.Server.sampleTime)
  return _internal_sampletime();
}
inline void Server::set_sampletime(::uint32_t value) {
  _internal_set_sampletime(value);
  // @@protoc_insertion_point(field_set:protocol.Server.sampleTime)
}
inline ::uint32_t Server::_internal_sampletime() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sampletime_;
}
inline void Server::_internal_set_sampletime(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.sampletime_ = value;
}

// optional bool InvalidSession = 10;
inline bool Server::has_invalidsession() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Server::clear_invalidsession() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.invalidsession_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool Server::invalidsession() const {
  // @@protoc_insertion_point(field_get:protocol.Server.InvalidSession)
  return _internal_invalidsession();
}
inline void Server::set_invalidsession(bool value) {
  _internal_set_invalidsession(value);
  // @@protoc_insertion_point(field_set:protocol.Server.InvalidSession)
}
inline bool Server::_internal_invalidsession() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.invalidsession_;
}
inline void Server::_internal_set_invalidsession(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.invalidsession_ = value;
}

// optional bool isGroup = 11;
inline bool Server::has_isgroup() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Server::clear_isgroup() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.isgroup_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool Server::isgroup() const {
  // @@protoc_insertion_point(field_get:protocol.Server.isGroup)
  return _internal_isgroup();
}
inline void Server::set_isgroup(bool value) {
  _internal_set_isgroup(value);
  // @@protoc_insertion_point(field_set:protocol.Server.isGroup)
}
inline bool Server::_internal_isgroup() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.isgroup_;
}
inline void Server::_internal_set_isgroup(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.isgroup_ = value;
}

// optional .google.protobuf.Timestamp packetTime = 12;
inline bool Server::has_packettime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.packettime_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Server::_internal_packettime() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.packettime_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Server::packettime() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protocol.Server.packetTime)
  return _internal_packettime();
}
inline void Server::unsafe_arena_set_allocated_packettime(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.packettime_);
  }
  _impl_.packettime_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.Server.packetTime)
}
inline ::google::protobuf::Timestamp* Server::release_packettime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.packettime_;
  _impl_.packettime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Server::unsafe_arena_release_packettime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protocol.Server.packetTime)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.packettime_;
  _impl_.packettime_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Server::_internal_mutable_packettime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.packettime_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.packettime_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.packettime_;
}
inline ::google::protobuf::Timestamp* Server::mutable_packettime() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_packettime();
  // @@protoc_insertion_point(field_mutable:protocol.Server.packetTime)
  return _msg;
}
inline void Server::set_allocated_packettime(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.packettime_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.packettime_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:protocol.Server.packetTime)
}

// repeated bytes extraClientMSG = 13;
inline int Server::_internal_extraclientmsg_size() const {
  return _internal_extraclientmsg().size();
}
inline int Server::extraclientmsg_size() const {
  return _internal_extraclientmsg_size();
}
inline void Server::clear_extraclientmsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extraclientmsg_.Clear();
}
inline std::string* Server::add_extraclientmsg()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_extraclientmsg()->Add();
  // @@protoc_insertion_point(field_add_mutable:protocol.Server.extraClientMSG)
  return _s;
}
inline const std::string& Server::extraclientmsg(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protocol.Server.extraClientMSG)
  return _internal_extraclientmsg().Get(index);
}
inline std::string* Server::mutable_extraclientmsg(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:protocol.Server.extraClientMSG)
  return _internal_mutable_extraclientmsg()->Mutable(index);
}
inline void Server::set_extraclientmsg(int index, const std::string& value) {
  _internal_mutable_extraclientmsg()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protocol.Server.extraClientMSG)
}
inline void Server::set_extraclientmsg(int index, std::string&& value) {
  _internal_mutable_extraclientmsg()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protocol.Server.extraClientMSG)
}
inline void Server::set_extraclientmsg(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_extraclientmsg()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.Server.extraClientMSG)
}
inline void Server::set_extraclientmsg(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_extraclientmsg()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.Server.extraClientMSG)
}
inline void Server::set_extraclientmsg(int index, absl::string_view value) {
  _internal_mutable_extraclientmsg()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:protocol.Server.extraClientMSG)
}
inline void Server::add_extraclientmsg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_extraclientmsg()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.Server.extraClientMSG)
}
inline void Server::add_extraclientmsg(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_extraclientmsg()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.Server.extraClientMSG)
}
inline void Server::add_extraclientmsg(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_extraclientmsg()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.Server.extraClientMSG)
}
inline void Server::add_extraclientmsg(const void* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_extraclientmsg()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.Server.extraClientMSG)
}
inline void Server::add_extraclientmsg(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_extraclientmsg()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:protocol.Server.extraClientMSG)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Server::extraclientmsg() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:protocol.Server.extraClientMSG)
  return _internal_extraclientmsg();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Server::mutable_extraclientmsg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:protocol.Server.extraClientMSG)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_extraclientmsg();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Server::_internal_extraclientmsg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.extraclientmsg_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Server::_internal_mutable_extraclientmsg() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.extraclientmsg_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto_2epb_2eh
